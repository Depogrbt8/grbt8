generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id @default(cuid())
  firstName       String
  lastName        String
  email           String           @unique
  password        String
  countryCode     String?
  phone           String?
  birthDay        String?
  birthMonth      String?
  birthYear       String?
  gender          String?
  identityNumber  String?
  isForeigner     Boolean          @default(false)
  emailVerified   DateTime?
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  lastLoginAt     DateTime?
  status          String           @default("active")
  role            String           @default("user")
  canDelete       Boolean          @default(true)
  accounts        Account[]
  passengers      Passenger[]
  payments        Payment[]
  priceAlerts     PriceAlert[]
  reservations    Reservation[]
  searchFavorites SearchFavorite[]
  sessions        Session[]
  surveyResponses SurveyResponse[]
  addresses       Address[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Reservation {
  id                  String    @id @default(cuid())
  userId              String
  type                String
  status              String
  amount              Float
  currency            String
  biletDukkaniOrderId String?
  biletDukkaniRouteId String?
  pnr                 String?
  validUntil          DateTime?
  passengers          String?
  flightNumber        String?
  origin              String?
  destination         String?
  departureTime       DateTime?
  arrivalTime         DateTime?
  airline             String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  payment             Payment?
  user                User      @relation(fields: [userId], references: [id])
}

model Payment {
  id            String      @id @default(cuid())
  reservationId String      @unique
  userId        String
  amount        Float
  currency      String
  status        String
  provider      String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  reservation   Reservation @relation(fields: [reservationId], references: [id])
  user          User        @relation(fields: [userId], references: [id])
}

model Passenger {
  id             String    @id @default(cuid())
  userId         String
  firstName      String
  lastName       String
  identityNumber String?
  isForeigner    Boolean   @default(false)
  birthDay       String?
  birthMonth     String?
  birthYear      String?
  gender         String?
  countryCode    String?
  phone          String?
  hasMilCard     Boolean   @default(false)
  hasPassport    Boolean   @default(false)
  passportNumber String?
  passportExpiry DateTime?
  milCardNumber  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  status         String    @default("active")
  isAccountOwner Boolean   @default(false)
  user           User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model PriceAlert {
  id                String   @id @default(cuid())
  userId            String
  origin            String
  destination       String
  departureDate     DateTime
  targetPrice       Float?
  createdAt         DateTime @default(now())
  lastNotifiedPrice Float?
  user              User     @relation(fields: [userId], references: [id])
}

model SearchFavorite {
  id            String   @id @default(cuid())
  userId        String
  origin        String
  destination   String
  departureDate DateTime
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
}

model SurveyResponse {
  id           String   @id @default(cuid())
  userId       String   // Kullanıcı ID'si eklendi
  answers      String   // JSON string olarak saklanacak
  completedAt  DateTime
  userAgent    String?
  ipAddress    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'personal' | 'corporate'
  title       String
  name        String?
  tcNo        String?
  companyName String?
  taxOffice   String?
  taxNo       String?
  address     String
  city        String
  district    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])

  @@index([userId])
}
